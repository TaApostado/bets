// Code generated by MockGen. DO NOT EDIT.
// Source: domain/challenged/challenged.interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	notification "github.com/TaApostado/common/notification"
	gomock "github.com/golang/mock/gomock"
)

// MockIChallenged is a mock of IChallenged interface.
type MockIChallenged struct {
	ctrl     *gomock.Controller
	recorder *MockIChallengedMockRecorder
}

// MockIChallengedMockRecorder is the mock recorder for MockIChallenged.
type MockIChallengedMockRecorder struct {
	mock *MockIChallenged
}

// NewMockIChallenged creates a new mock instance.
func NewMockIChallenged(ctrl *gomock.Controller) *MockIChallenged {
	mock := &MockIChallenged{ctrl: ctrl}
	mock.recorder = &MockIChallengedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChallenged) EXPECT() *MockIChallengedMockRecorder {
	return m.recorder
}

// Credits mocks base method.
func (m *MockIChallenged) Credits() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credits")
	ret0, _ := ret[0].(float32)
	return ret0
}

// Credits indicates an expected call of Credits.
func (mr *MockIChallengedMockRecorder) Credits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credits", reflect.TypeOf((*MockIChallenged)(nil).Credits))
}

// Deposit mocks base method.
func (m *MockIChallenged) Deposit(arg0 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIChallengedMockRecorder) Deposit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIChallenged)(nil).Deposit), arg0)
}

// Id mocks base method.
func (m *MockIChallenged) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockIChallengedMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockIChallenged)(nil).Id))
}

// Notificator mocks base method.
func (m *MockIChallenged) Notificator() notification.INotificator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notificator")
	ret0, _ := ret[0].(notification.INotificator)
	return ret0
}

// Notificator indicates an expected call of Notificator.
func (mr *MockIChallengedMockRecorder) Notificator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notificator", reflect.TypeOf((*MockIChallenged)(nil).Notificator))
}

// Withdraw mocks base method.
func (m *MockIChallenged) Withdraw(arg0 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIChallengedMockRecorder) Withdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIChallenged)(nil).Withdraw), arg0)
}
